#!/usr/bin/perl -w
our $VERSION="0.7.1";

# --- stuff to before any libraries are loaded ---
BEGIN {
	# --- do this to ensure we don't go unicode ---
	if (!defined $ENV{LANG} || $ENV{LANG} ne 'C') {
		$ENV{LANG}='C';
		exec $0,@ARGV;
}	}

use Data::Dumper; $Data::Dumper::Indent=1; $Data::Dumper::Sortkeys=$Data::Dumper::Terse=1;
use Cwd;
use Digest::MD5 qw( md5_hex );
use Getopt::Long;
use IO::File;
use Switch;
use Symbol;

use strict;
use warnings;

# === CLI Options ===========================================================
my $options = configure({
	verbosity => 0,
	filter    => 'fdl',
});

# === Configuration and Globals =============================================
# --- file buffer for _readfile ---
my $filebuffer = {};

# === Main Body of Code =====================================================
SWITCH: {
	$options->{generate} && do { generate(); last };
	$options->{diff}     && do { diff(); last };
	$options->{list}     && do { list(); last };
}

exit 0;

# === Functions =============================================================
# --- generate a manifest ---
sub generate {
	# --- predefine/declare a few vars ---
	$options->{extended} = 1;   # force --extended for generate

	# --- open the outfile if not already opened ---
	my $outfile = $options->{outfile};
	if ($outfile && !$options->{filesym}) {
		$options->{filesym} = new IO::File(($options->{append} ? '>>' : '>') . $outfile);
		print "writing manifest to $outfile\n"
			unless $options->{verbosity} < 0;
	}

	# --- generate the manifest hash ---
	my $hash = _genHash(@ARGV);

	# --- write the generated hash as a text manifest ---
	foreach my $file (sort keys %$hash) {
		_writeline($hash->{$file});
	}
}

# --- list files in a manifest ---
sub list {
	foreach my $file (@ARGV) {
		my $md5 = _loadHash($file);
		foreach my $file (sort keys %$md5) {
			# --- filter on type ---
			next unless _fileFilter($md5->{$file});
			_writeline($md5->{$file});
}	}	}

# --- show diffs between two files ---
sub diff {
	# --- error checks ---
	usage('diff requires exactly two valid filenames') unless @ARGV == 2;

	# --- load file hashes and trim based on --filter ---
	my $md5old = _loadHash(shift @ARGV || undef);
	map { _fileFilter($md5old->{$_}) || delete $md5old->{$_} } keys %$md5old;
	my $md5new = _loadHash(shift @ARGV || undef);
	map { _fileFilter($md5new->{$_}) || delete $md5new->{$_} } keys %$md5new;

	# --- create a unique list of all files ---
	my @allfiles = keys %{{ map { $_, 1 } keys %$md5old, keys %$md5new }};

	# --- loop through all files, generating diffs as found ---
	foreach my $file (sort @allfiles) {
		# --- shorten a few vars ---
		my $old = $md5old->{$file};
		my $new = $md5new->{$file};

		# --- removed (only in old) ---
		if (defined $old && !defined $new) {
			_writeline($old, $options->{flags} && '-')
				if $options->{old};
			next;
		}

		# --- added (only in new) ---
		if (!defined $old && defined $new) {
			_writeline($new, $options->{flags} && '+')
				if $options->{new};
			next;
		}

		# --- unchanged ---
		if ($old->{mode} eq $new->{mode} &&
		    $old->{type} eq $new->{type} &&
		    $old->{sum}  eq $new->{sum}  &&
		    $old->{uid}  eq $new->{uid}  &&
		    $old->{gid}  eq $new->{gid}
		) {
			_writeline($new, $options->{flags} && '=')
				if $options->{unchanged};
			next;
		}

		# --- changed ---
		if ($options->{changed}) {
			_writeline($old, $options->{flags} ? ($options->{extended} ? '<' : 'C') : undef);
			# --- only show the second line if we're displaying flags or extended info ---
			_writeline($new, '>')
				if $options->{extended} && $options->{flags};
		}
	}
}

# === Helper Functions ======================================================
# --- write a manifest line to STDOUT or --outfile ---
sub _writeline {
	my ($hash, $flag) = (shift, shift);

	# --- oft used vars ---
	my $outfile   = $options->{outfile};
	my $verbosity = $options->{verbosity};

	# --- generate the line ---
	my $line = '';
	$line .= "$flag " if defined $flag;
	$line .= sprintf "%s %-4s %04o %5d:%-5d", $hash->{sum}, $hash->{type}, $hash->{mode}, $hash->{uid}, $hash->{gid}
		if $options->{extended};
	$line .= _normpath($hash->{name}) ."\n";

	if ($options->{outfile}) {
		# --- open the outfile if not already opened ---
		unless ($options->{filesym}) {
			$options->{filesym} = new IO::File(($options->{append} ? '>>' : '>') . $outfile);
			print "writing manifest to $outfile\n"
				unless $verbosity < 0;
		}

		# --- print to file ---
		$options->{filesym}->print($line);
	}

	# --- print to stdout ---
	print $line
		if (!$outfile && $verbosity >= 0) || ($outfile && $verbosity >= 1);
}

# --- load a manifest file into a datastruct ---
sub _loadHash {
	my ($content, $version) = (shift, shift || $::VERSION);

	# --- if the content is @LIST, generate a manifest on the fly ---
	if ($content =~ /^\@/) {
		return _genHash($content);
	}

	# --- we were passed filename, not a a block of content ---
	elsif (! ($content =~ /[\r\n]/)) {
		my $filename = $content;

		# --- error checks ---
		usage("file '$filename' does not exist")   unless -e $filename;
		usage("'$filename' is not a regular file") unless -f $filename;

		# --- load the file ---
		$content = _readfile($filename);
	}

	# --- split the content by line ---
	my @lines = split /\s*[\n\r]+\s*/, $content;

	# --- generate the hash of names/sums ---
	my $hash = {};
	foreach my $line (@lines) {
		# --- convert line to fields ---
		my $lhash;
		if ($version le '0.5') {
			# --- old format ---
			@{$lhash}{qw( sum type mode name )} = ($line =~
				/^                        # beginning of line
					([A-Fa-f0-9]{32}) \s+  # Sum
					(file|dir|link)   \s+  # Type
					([0-7]{4})        \s+  # Mode
					(.*?)             \s*  # Name
				$/x                       # end of line
			);
		} else {
			# --- current format ---
			@{$lhash}{qw( sum type mode uid gid name )} = ($line =~
				/^                        # beginning of line
					([A-Fa-f0-9]{32}) \s+  # Sum
					(file|dir|link)   \s+  # Type
					([0-7]{4})        \s+  # Mode
					(\d+):(\d+)       \s+  # UID:GID
					(.*?)             \s*  # Name
				$/x                       # end of line
			);
		}
		# --- convert mode to decimal --
		$lhash->{mode} = oct($lhash->{mode});

		# --- save the hash ---
		$hash->{$lhash->{name}} = $lhash;
	}

	return $hash;
}

# --- generate manifest data structure ---
sub _genHash {
	my @args = @_;

	# --- predefine/declare a few vars ---
	my $hash = {};
	my $lsopts = $options->{recursive} ? 'fdr' : 'fd';
	my $prefix = $options->{prefix} || '';

	# --- change to the basedir if specified ---
	my $pushdir = cwd;
	if ($options->{basedir}) {
		unless (-d $options->{basedir}) {
			print STDERR "error: could not change to basedir $options->{basedir}\n";
			exit 1;
		}
		chdir $options->{basedir};
	}

	# --- use all files in current dir if no args given ---
	unless (@args) {
		my $ls = _ls('.', 'fd');
		$filebuffer->{'<noparams>'} = join "\n", keys %$ls;
		push @args, '@<noparams>';
	}

	# --- loop through each arg as a file/dir name ---
	foreach my $arg (@args) {

		my $ls;

		# --- if it's a @LIST, push the list of files onto the enf of @args ---
		if ($arg =~ /^\@(.*?)$/) {
			my $listfile = $1;
			my @list;

			my $version = _fileVersion($listfile);
			# --- if this is a manifest, load it and use the list of files ---
			if ($version) {
				my $subhash = _loadHash($listfile, $version);
				@list = sort keys %$subhash;
			}
			# --- it's just a list of files ---
			else {
				my $content = _readfile($listfile);
				@list = split /\s*[\r\n]+\s*/, $content || '';
			}

			foreach my $file (@list) {
				# --- if --recursive, make sure we get everything --
				if ($options->{recursive}) {
					my $ls2 = _ls($file, $lsopts);
					foreach my $key (keys %$ls2) {
						$ls->{$key} = $ls2->{$key}
					}
				}

				# --- just get the one item if not --recursive ---
				else {
					$ls->{$file} = _filestat($file);
				}
			}
		}

		# --- it's a file/dir ---
		else {
			# --- ignore files that don't exist ---
			next unless -e $arg;

			# --- list file/dir ---
			$ls = _ls($arg, $lsopts);
		}

		# --- and process each file/dir ---
		foreach my $file (sort keys %$ls) {

			# --- filter on type ---
			next unless _fileFilter($ls->{$file});

			# --- test for bad symlinks ---
			if (-l $file) {
				# --- read link and prefix dir if not absolute ---
				my $link = readlink($file);
				$link = _normpath("$file/../$link")
					unless $link =~ m|^/|;
			}

			# --- generate the md5sum ---
			my $sum;
			my $type = $ls->{$file}->{type};
			if    ($type eq 'dir')  { $sum = '0' x 32 }
			elsif ($type eq 'link') { $sum = md5_hex readlink($file) }
			else                    { $sum = md5_hex _readfile($file) }

			# --- build the file's datastruct ---
			my $name = $prefix . $file;
			$hash->{$name} = {
				sum  => $sum,
				type => $type,
				mode => $ls->{$file}->{mode},
				uid  => $ls->{$file}->{uid},
				gid  => $ls->{$file}->{gid},
				name => $name,
			};
		}
	}

	# --- pop back to the old cwd ---
	chdir $pushdir;

	return $hash;
}

# --- filter a file by type based on options ---
sub _fileFilter {
	my ($filehash) = @_;
	return 1 if $options->{filter} =~ /f/ && $filehash->{type} eq 'file';
	return 1 if $options->{filter} =~ /d/ && $filehash->{type} eq 'dir';
	return 1 if $options->{filter} =~ /l/ && $filehash->{type} eq 'link';
	return 0;
}

# --- determine the version of a manifest file ----
sub _fileVersion {
	my $filename = shift;

	my $line = (split /\s*[\r\n]+\s*/, _readfile($filename))[0] || '';
#	# --- read a line from the file ---
#	my $fh = gensym(); open $fh, $filename  # open the file
#		or return '';                        #    or return unknown
#	my $line = <$fh>; chomp $line;          # read a line
#	close $fh; ungensym($fh);               # close the file

	# --- current version ---
	return $::VERSION
		if $line =~
			/^                        # beginning of line
				([A-Fa-f0-9]{32}) \s+  # Sum
				(file|dir|link)   \s+  # Type
				([0-7]{4})        \s+  # Mode
				(\d+):(\d+)       \s+  # UID:GID
				(.*?)             \s*  # Name
			$/x;                      # end of line

	# --- version 0.5 & earlier ---
	return '0.5'
		if $line =~
			/^                        # beginning of line
				([A-Fa-f0-9]{32}) \s+  # Sum
				(file|dir|link)   \s+  # Type
				([0-7]{4})        \s+  # Mode
				(.*?)             \s*  # Name
			$/x;                      # end of line

	# --- unknown format ---
	return '';
}

# === Stuff taken from iTools ===============================================

# --- read a file ---
sub _readfile {
	my $filename = shift || return undef;             # get filename (required)

	# --- don't read content twice ---
	return $filebuffer->{$filename} if $filebuffer->{$filename};

	# --- read the file as one block ---
	my $fh = gensym(); open $fh, $filename or return undef;
	my $content; { local $/; $content = <$fh>; }
	close $fh; ungensym($fh);

	# --- save the content to the buffer and return ---
	$filebuffer->{$filename} = $content;
	return $content;
}

# --- generate a dir hash structure ---
sub _ls {
	my ($path, $opts) = (shift || '.', shift || '');

	# --- set a few variables ---
	my $recurse = $opts =~ /r/ ? 1 : 0;

	# --- get name and stat for current file/path ---
	my $stat = _filestat($path);
	my $list = { $stat->{name} => $stat };

	# --- not a dir? return a single entry ---
	return $list
		if $stat->{type} ne 'dir';

	# --- we have a dir, start building the list ---
	opendir my $dh = gensym(), $path;
	foreach my $file (readdir $dh) {
		# --- ignore . and .. ---
		next if $file eq '.' || $file eq '..';

		# --- get stats for file ---
		my $stat = _filestat("$path/$file");
		$list->{$stat->{name}} = $stat;

		# --- recurse subdirs ---
		if ($stat->{type} eq 'dir' && $recurse) {
			my $innerls = _ls($stat->{name}, $opts);
			while (my ($key, $value) = each %$innerls) {
				$list->{$key} = $value;
			}
		}
	}
	closedir $dh; ungensym $dh;

	# --- remove './' if it exists ---
	delete $list->{'.'};

	return $list;
}

# --- generate a hash from 'stat' ---
sub _filestat {
	my ($file, $stat) = (shift, {});
	return unless $file; # return if no file

	# --- get keys and values ---
	my @statkey = qw( dev inode mode numlink uid gid rdev size atime mtime ctime blocksize blocks );
	my @statval = -l $file ? lstat $file : stat $file;

	# --- generate the stat hash ---
	for (my $ii = 0; $ii < @statkey; $ii++) {
		$stat->{$statkey[$ii]} = $statval[$ii];
	}

	# --- bitwise or the mask ---
	$stat->{mode} &= 07777;

	# --- set the file type ---
	if (-l $file && !$options->{follow}) { $stat->{type} = 'link' }
	elsif (-d $file)                     { $stat->{type} = 'dir' }
	else                                 { $stat->{type} = 'file' }

	# --- set the filename ---
	$stat->{name} = _normpath($file);
	#$stat->{name} .= '/' if $stat->{type} eq 'dir';

	# --- set the link path if we have one ---
	if (-l $file) {
		$stat->{'link'} = readlink $file;

		# --- if the link is broken, mark it as a link regardless of the 'follow' flag ---
		$stat->{type} = 'link' unless -e $stat->{'link'};
	}

	# --- return stat hash/hashref ---
	return wantarray ? %$stat : $stat;
}

# --- normalize a filesystem path ---
sub _normpath {
	my $inpath = shift;

	# --- save whether this is a relative or absolute path ---
	my $inabs = $inpath =~ m|^/|;

	# --- tear apart the path and process each segment ---
	my @parts;
	foreach my $segment (split '/', $inpath) {
		# --- toss away single dots and double slashes ---
		next if $segment eq '' || $segment eq '.';

		# --- process double dots ---
		if ($segment eq '..') {
			if (@parts == 0) {
				# --- add '..' at the beginning of a relative path ---
				push @parts, '..' unless $inabs
			} else {
				# --- push '..' if prev segment also a '..' ---
				if ($parts[-1] eq '..') { push @parts, '..' }
				# --- else remove prev segment ---
				else { pop @parts }
			}
		} else {
			# --- if we got here, we have a valid segment ---
			push @parts, $segment;
		}
	}

	# --- reassemble the path ---
	my $path = join '/', @parts;

	# --- if path is absolute, add a prefix slash ---
	$path = "/$path" if $inpath =~ m|^/|;
	# --- use '.' if path is empty ---
	$path = '.' if $path eq '';

	return $path;
}

# === Configuration =========================================================
sub configure {
	usage() unless @ARGV; # force help message if no arguments

	# --- parse the command line options ---
	my $options = shift || {};
	Getopt::Long::Configure('bundling');
	GetOptions($options,
		# --- core parameters ---
		'help|?+', 'man+',  # usage and man pages
		'quiet|q+',         # do things quietly
		'verbose|v+',       # do things loudly
		'verbosity=n',      # set an explicit verbosity level
		'version+',         # show the version

		# --- general options ---
		'filter|F=s',       # filter output by (f)iles, (d)irs and (l)inks

		# --- generate options ---
		'generate|g+',      # generate a manifest
		'recursive|r+',     # do things recursively
		'follow|L+',        # follow symlinks
		'basedir|base|b=s', # base dir for manifest
		'prefix|p=s',       # add prefix files
		'outfile|O=s',      # send output to a file
			'append|a+',     # append to --file

		# --- list options ---
		'list|l+',          # list the files in a manifest

		# --- list and diff options ---
		'extended|x+',      # show extended info

		# --- diff options ---
		'diff|d+',          # generate diffs
		'old|o+',           # show old files
		'changed|c+',       # show changed files
		'unchanged|u+',     # show unchanged files
		'new|n+',           # show new files
		'all+',             # show all files
		'flags|f+',         # show -/</>/C/=/+ flags

		#! TODO: implement diff-filtering feature
		'sum|s+', 'type|t+', 'mode|m+', 'uid|U+', 'gid|G+',
	);

	# --- show usage, man page or version ---
	$options->{help}    && do { usage() };
	$options->{man}     && do { exec "perldoc $0" };
	$options->{version} && do { print "$::VERSION\n"; exit 0 };

	# --- verbosity ---
	usage("can't be quiet and verbose at the same time")
		if $options->{quiet} && $options->{verbose};
	$options->{verbosity} = ($options->{verbose} || 0) - ($options->{quiet} || 0);
	delete @{$options}{qw(quiet verbose)};

	unless ($options->{generate} || $options->{diff} || $options->{list}) {
		switch (shift @ARGV) {
			case /^g/i { $options->{generate} = 1 }
			case /^d/i { $options->{diff}     = 1 }
			case /^l/i { $options->{list}     = 1 }
			else       { usage("COMMAND required") }
		}
	}

	# --- default: show old, changed and new ---
	$options->{old} = $options->{changed} = $options->{new} = 1
		unless $options->{old} || $options->{changed} || $options->{unchanged} || $options->{new};
	# --- --all overrides the other options ---
	$options->{old} = $options->{changed} = $options->{unchanged} = $options->{new} = 1
		if $options->{all};

	return $options;
}

# === Usage and Error Message ===============================================
sub usage {
	my $error = shift;
	my $progname = ($0 =~ /([^\/]*)$/)[0] || $0;

	print STDERR qq[\nerror: $error\n] if $error;
	print STDERR qq[
usage: $progname COMMAND [options] FILE|PATH|\@LIST [...]

   -?, --help          display this message
      --man               display the manual page for $progname
   -q, --quiet         do things quietly
   -v, --verbose       do things loudly
   --version           show version

Commands (exactly one required):
   g, generate         generate manifest
   d, diff             compare two manifests
   l, list             list files in manifest

General Options:
   -F, --filter TYPE   show/manifest only (f)iles, (d)irs, (l)inks

Generate Options:
   -r, --recursive     recurse subdirectories
   -L, --follow        follow symlinks
   -b, --basedir DIR   generate manifest starting ar DIR
   -p, --prefix PATH   prefix PATH to all filenames
   -O, --outfile FILE  output file
      -a, --append     append to --output file

Diff Options:
   -o, --old           show files only in OLD (1st file)
   -c, --changed       show changed files
   -u, --unchanged     show unchanged files
   -n, --new           show files in NEW (2nd file)
   --all               show all files (default is -ocn)
   -f, --flags         show change flags: - < > = +

List and Diff Options:
   -x, --extended      show md5sum, file type and permissions

iTools manifest, version $::VERSION

];
	exit 1;
}

=head1 NAME

manifest - iTools manifest tool

=head1 SYNOPSIS

 manifest {-?|--man}
 manifest generate [-rL] [-F TYPE] [-b DIR] [-p PATH]
          [-O MANIFEST [-a]] [FILE|PATH|@LIST [...]]
 manifest list [-x] [-F TYPE] MANIFEST|@LIST [...]
 manifest diff [-ocunx] [-F TYPE] MANIFEST.OLD|@LIST MANIFEST.NEW|@LIST

=head1 DESCRIPTION

B<manifest> is a tool for generating, listing and diff'ing filesystem manifests.

=head2 Generating Manifests

The common form for generating manifests is:

   manifest -gr FILE|PATH|@LIST ...

This command displays a manifest generated from all FILEs, PATHs or @LISTs given.
If no FILE, PATH or @LIST is given, all files in the current directory (or
B<--basedir> if specified) are used.

By default, B<generate> does not recurse subdirectories.
Use the B<-r> option to to change this behavior.

When a symlink is found, B<manifest> uses the destination's path/file to generate the MD5Sum.
With the B<-L> flag, all symlinks are followed and are listed in the
manifest as 'file' or 'dir' instead of 'link'.
Symlink'ed directories are also traversed if the flag pair B<-Lr> is given.
Broken links are treated as links.

B<-O MANIFEST> sends the manifest to a file instead of STDOUT.
If you also want to see the manifest on your screen, increase the verbosity with B<-v>.
You can append to an existing manifest with the B<-a> flag.

By default, all paths in manifests are generated relative to the current directory.
To create a manifest based in another directory, use the B<-b DIR> option.
You can also prepend an arbitrary path (or any string for that matter) to each filename
using the B<-p PATH> option.

=head2 Listing The Contents of Manifests

If you invoke the command:

   manifest list foo.mf

the list of files in F<foo.mf> is sent to STDOUT.

N<list> laso has a number fo filtering options.
For a list all files in multiple manifests that are symlinks displayed along
with their extended information (MD5Sum, Type, Mode and UID:GID), you would
execute the following:

   manifest list --extended --links foo.mf bar.mf

See the L<List Options> section below for a fill list of options.

=head2 Determining Differences Between Manifests

The simple form of the B<diff> option is:

   manifest diff foo.mf bar.mf

You can also filter the B<diff> results by file type and whether files have changed.
See the L<Diff Options> section below for details.

=head2 @LIST Files

A feature added as of v0.7 is the ability to create manifests dynamically
from a file list.
You can now compare a saved manifest to the contents of your filesystem much
more effectively.

In v0.6 and earlier, B<diff>'ing a saved manifest against the current
contents of your filesystem was problematic.
To do that, you would do something like the following (FYI: this still works):

   manifest --generate -r -b /usr/local > current.mf
   manifest --diff -ocf original.mf current.mf

This method generates a manifest for the whole of the base directory
(/usr/local in the example) and not just for the files in which you're
interested.
If there are many and/or large files in the base directory aside from the
files you're looking to compare, the performance impact is notable.

The @LIST feature introduced in v0.7 allows you to create a manifest from a
list of files.
As a result, all the 'extra' files that caused a problem in the first example
are no longer an issue.

The command sequence would now look like this:

   manifest list original.mf > original.list
   manifest generate -b /usr/local @original.list > current.mf
   manifest diff -f original.mf current.mf

That's much cleaner, but we can do better.
To start, we can combine the B<generate> and B<diff> commands into one line like
so:

   manifest list original.mf > original.list
   manifest diff -fb /usr/local original.mf @original.list

Note that we used B<generate>-only option B<-b> (B<--basedir>) for the B<diff> command.
When using @LIST, all B<generate>-only options are available and applied to
files in the list.

@LIST also lets you pipe in the list via STDIN by using a dash ('-') for the filename.
That means we can reduce the command down to a one-liner that looks like this:

   manifest list original.mf | manifest diff -fb /usr/local original.mf @-

There's one more feature that can shorten the command even more.
If the contents of @LIST is recognized as a valid manifest, it will extract
its list of files from that manifest.
That would make for our best example yet:

   manifest diff -b /usr/local original.mf @original.mf

=head1 COMMANDS

There are three general commands this tool understands:

=over 4

=item B<g[enerate]> FILE|PATH|@LIST [...]

Generate a manifest for the file(s) listed on the command line.

=item B<d[iff]> MANIFEST.OLD|@LIST MANIFEST.NEW|@LIST

Generate a list of files that differ based on two manifests.

=item B<l[ist]> MANIFEST|@LIST [...]

List the files or contents of one or more manifest.

=back

All commands can be passed as options by prefixing them with a single or double minus
(for single character or long options respectively).
This allows you to place the command anywhere in the command line.

Commands also can be shortened down to a single character.

For example, the following lines are all equivalent:

   manifest --generate --recursive --prefix /tmp/ *
   manifest * --recursive --prefix /tmp/ --gener
   manifest generate * --recursive --prefix /tmp/
   manifest gen -r --prefix /tmp/ *
   manifest g -r * -p /tmp/
   manifest -p /tmp/ * -gr
   manifest -grp /tmp/ *

=head1 OPTIONS

=head2 Generate Options

=over 4

=item B<-r>, B<--recursive>

Recurse directories when generating a manifest.
Symlinks to directories are also be recursed if the B<--follow> flag is given.

=item B<-L>, B<--follow>

By default, symlinks are preserved as 'link' in the manifest.
The manifest checksum is generated from the link's destination path/filename.

The B<--follow> flag changes this behavior by attempting to follow the symlink to its destination.
If the symlink points to a file, it is listed as a 'file' and the checksum is generated from its contents.
If the symlink points to a directory, it is listed as a 'dir' and recursed if the B<--recursive> flag is given.
If the symlink is broken, it is treated as though the B<--follow> flag had not been specified.

=item B<-b>, B<--basedir> DIR

By default, all paths in manifests are generated relative to the current directory.
B<--basedir> effectively does a 'chdir' to DIR before generating the manifest.

=item B<-p>, B<--prefix> PATH

This option allows you preprepend an arbitrary string (usually a path) to all files in the manifest.

=item B<-O>, B<--outfile> MANIFEST

=item B<-a>, B<--append>

By default, the generated manifest is displayed on the screen.
B<--outfile> redirects this output to a file, creating a new file or overwriting an existing file as necessary.
The B<--append> flag allows you to append to an existing manifest instead.

If you still want to see the manifest on the screen when using B<--outfile>,
use B<-v> to increase the verbosity.

=back

=head2 Diff Options

=over 4

=item B<-o>, B<--old>; B<-c>, B<--changed>; B<-u>, B<--unchanged>; B<-n>, B<--new>; B<--all>

Filter results based on whether and how the file has changed:

   --old        show files that are in OLD but not in NEW
   --changed    show files that have changed between OLD and NEW
   --unchanged  show files that have changed between OLD and NEW
   --new        show files that are in NEW but not in OLD
   --all        all of the above

If none of these flags are given, B<-ocn> is presumed.

=item B<-f>, B<--flags>

Display flags before each line to indicate if and how the file has changed:

   -   the file is in OLD but not in NEW
   C   file has changed (without -x)
   <   file has changed, OLD values (with -x)
   >   file has changed, NEW values (with -x)
   =   file is unchanged
   +   the file is in NEW but not in OLD

=back

=head2 List and Diff Options

=over 4

=item B<-x>, B<--extended>

Show extended information (MD5Sum, Type and Mode) before the file name.
If used in a B<diff> operation without the B<--flags> option, the MD5Sum of the OLD file is given.

=back

=head2 General Options

=over 4

=item B<-F>, B<--filter> FLAGS

Filters results based on file type.
Use any combination of the following single-character values to specify the type(s):

   d  dir
   f  file
   l  symlink

If none of these flags are given, all are presumed.

=item B<-?>, B<--help>; B<--man>

Display a short usage message, or the full manual page (sic).

=item B<-q>, B<--quiet>; B<-v>[B<vvv>], B<--verbose>, B<--verbosity> LEVEL

Do things quietly or loudly.
There are several incremental levels of verbosity (LEVEL in brackets) :

    -qq    (-2) suppress all messages
    -q     (-1) only show error messages
           (0)  normal output
    -v     (1)  show extended progress
    -vv    (2)  show detailed progress
    -vvv   (3)  show system and extended internal commands
    -vvvv  (4)  full debugging output

=item B<--version>

Show the tool's version number.

=back

=head1 OUTPUT FORMAT

The output of this tool is intentionally designed be used by other programs.
For future compatibility, use the following rules when parsing files and output.

=head2 General Rules

An exit status of 0 indicates success; exit >= 1 indicates warning or error (always treat it as an error).
All rules apply when output sent to a file via the B<--outfile> flag.
Rules only apply to STDOUT when verbosity is exactly 0 (i.e. no B<-qv> flags are used).

=head2 Fields

This tool outputs up to 5 fields depending on the function being executed and flags passed.
All fields are delimited by one or more character of whitespace.

A simple example of these fields are as follows:

   MD5Sum                           Type Mode  UID : GID  Filename
   -------------------------------- ---- ---- ----- ----- ----------------
   00000000000000000000000000000000 dir  0755     0:0     foo/
   4d40a8a9984cf47c8b512e32d3f46afa file 0644 65535:65535 foo/bar.file
   d8db4cc080cfe6c8f871b49b07eb7839 link 0400  1234:5678  foo/bar.link

External processors should follow these guidelines strictly.
For future compatibility, any results or values that do not fall within the guidelines
should be ignored or rejected.

The following table shows which fields are generated depending on command executed
and flags passed to the command:

             Flag MD5Sum Type Mode UID:GID Filename
             ---- ------ ---- ---- ------- --------
   generate          x     x    x     x        x
   diff                                        x
   diff -f     x                               x
   diff -x          OLD    x    x     x        x
   diff -fx    x     x     x    x     x        x
   list                                        x
   list -x           x     x    x     x        x

OLD = only the MD5Sum of the 1st differentiated file is shown.

=over 4

=item Flag

A single character flag that indicates if and how a file has changed.

   -   the file is in OLD but not in NEW
   C   file has changed (without -x)
   <   file has changed, OLD values (with -x)
   >   file has changed, NEW values (with -x)
   =   file is unchanged
   +   the file is in NEW but not in OLD

=item MD5Sum

A 32 character hexadecimal MD5Sum of the file contents or the destination path of a symlink.
For directories, this value is a series of 32 zeros.

=item Type

A text field describing the file type.
At present three types of files are implemented: 'file', 'dir' and 'link'.

=item Mode

A 4 digit octal mode specifying file permissions.
See chmod(1) for details on these modes.

=item UID:GID

A pair of colon-separated digits giving the numeric user and group IDs for the file.

=item Filename

The path and/or name of the file, link or directory.
All whitespace within the filename is significant.
All whitespace at the end of a line should be ignored.

=back

The following regex can be used to parse manifest lines
(using Perl's extended format regex for commentary - see perlre(1) for details):

   /^                        # beginning of line
      ([+C<>=-])        \s+  # Flag
      ([A-Fa-f0-9]{32}) \s+  # Sum
      (file|dir|link)   \s+  # Type
      ([0-7]{4})        \s+  # Mode
      (\d+):(\d+)       \s+  # UID/GID
      (.*?)             \s*  # Name
   $/x                       # end of line

Adjust your regex by removing lines depending on the output you are expecting.

=head1 TODO, KNOWN ISSUES AND BUGS

=over 4

=item TODO: B<Additional Input and Output Formats>

Consider other formats that may be even more parsable: Data::Dumper, YAML, etc.

=item TODO: B<Filter Diffs by Change Type>

Add flags such as B<--sum>, B<--type>, B<--mode>, B<--uid> and B<--gid> for
filtering based on change type.

=back

=head1 REPORTING BUGS

Report bugs in the iTools' issue tracker at
L<https://github.com/iellenberger/itools/issues>

=head1 AUTHOR

Written by Ingmar Ellenberger.

=head1 COPYRIGHT

Copyright (c) 2001-2012 by Ingmar Ellenberger and distributed under The Artistic License.
For the text the license, see L<https://github.com/iellenberger/itools/blob/master/LICENSE>
or read the F<LICENSE> in the root of the iTools distribution.

=head1 DEPENDENCIES

=head2 Core Perl Modules

Data::Dumper(3pm),
Cwd(3pm),
Digest::MD5(3pm),
Getopt::Long(3pm),
IO::File(3pm),
Symbol(3pm),
strict(3pm),
warnings(3pm)

=head1 SEE ALSO

chmod(1),
md5sum(1),
perlre(1)

=cut
